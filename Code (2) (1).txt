Code
GitHub Repository Structure
/Traffic-Prediction-Smart-Cities
|-- /data
|   |-- traffic_data.csv (or any other data files used)
|-- /src
|   |-- main.py (main code for running the traffic prediction model)
|   |-- lstm_model.py (LSTM model implementation)
|   |-- svm_model.py (SVM model implementation)
|   |-- data_processing.py (code for processing the traffic data)
|-- /models
|   |-- lstm_model.h5 (saved LSTM model)
|   |-- svm_model.pkl (saved SVM model)
|-- /notebooks
|   |-- traffic_data_exploration.ipynb (Jupyter notebook for data exploration)
|-- /requirements.txt
|-- /README.md


Code (Python)
import pandas as pd
from data_processing import preprocess_data
from lstm_model import train_lstm_model, predict_lstm
from svm_model import train_svm_model, predict_svm

# Load data
data = pd.read_csv('data/traffic_data.csv')

# Preprocess the data
processed_data = preprocess_data(data)

# Split the data into training and testing sets
train_data, test_data = processed_data.split_data()

# Train the models
lstm_model = train_lstm_model(train_data)
svm_model = train_svm_model(train_data)

# Make predictions
lstm_predictions = predict_lstm(lstm_model, test_data)
svm_predictions = predict_svm(svm_model, test_data)

# Evaluate and compare results
evaluate_predictions(lstm_predictions, svm_predictions)


LSTM Model Code
from keras.models import Sequential
from keras.layers import LSTM, Dense
import numpy as np
	
def create_lstm_model(input_shape):
    model = Sequential()
    model.add(LSTM(50, activation='relu', input_shape=input_shape))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

def train_lstm_model(train_data):
    X_train, y_train = train_data
    model = create_lstm_model((X_train.shape[1], X_train.shape[2]))
    model.fit(X_train, y_train, epochs=10, batch_size=32, verbose=1)
    model.save('models/lstm_model.h5')
    return model

def predict_lstm(model, test_data):
    X_test, _ = test_data
    predictions = model.predict(X_test)
    return predictions


SVM Model Code
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error
import pickle

def train_svm_model(train_data):
    X_train, y_train = train_data
    model = SVR(kernel='rbf')
    model.fit(X_train, y_train)
    with open('models/svm_model.pkl', 'wb') as f:
        pickle.dump(model, f)
    return model

def predict_svm(model, test_data):
    X_test, _ = test_data
    predictions = model.predict(X_test)
    return predictions


Code For Processing Traffic Data
import numpy as np
from sklearn.model_selection import train_test_split

def preprocess_data(data):
    # Example of basic data preprocessing (this should be adjusted according to your data)
    data.fillna(0, inplace=True)
    return data

def split_data(data):
    X = data.drop('target', axis=1)
    y = data['target']
    return train_test_split(X, y, test_size=0.2, random_state=42)


Code For Decision Tree
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error
import pickle

def train_decision_tree_model(train_data):
    # Unpack the training data
    X_train, y_train = train_data

    # Initialize the Decision Tree Regressor with default parameters
    model = DecisionTreeRegressor(random_state=42)

    # Train the model
    model.fit(X_train, y_train)

    # Save the trained model
    with open('models/decision_tree_model.pkl', 'wb') as f:
        pickle.dump(model, f)

    return model

def predict_decision_tree(model, test_data):
    # Unpack the test data
    X_test, _ = test_data

    # Make predictions
    predictions = model.predict(X_test)

    return predictions

def evaluate_decision_tree(predictions, actual):
    # Calculate the Mean Squared Error as an example metric
    mse = mean_squared_error(actual, predictions)
    print(f"Decision Tree Model Mean Squared Error: {mse}")
    return mse

2


